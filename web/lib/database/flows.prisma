generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views", "multiSchema", "relationJoins"]
  output          = "../../node_modules/@prisma/flows"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
  schemas   = ["web", "onchain", "juicebox"]
}

model Draft {
  id              Int      @id @default(autoincrement())
  title           String
  description     String
  tagline         String?
  image           String
  users           String[]
  isPrivate       Boolean  @default(true)
  isOnchain       Boolean  @default(false)
  updatedAt       DateTime @updatedAt
  createdAt       DateTime @default(now())
  flowId          String
  isFlow          Boolean  @default(false)
  transactionHash String?
  opportunityId   String?  @map("opportunity_id")

  flow        Grant        @relation(fields: [flowId], references: [id])
  opportunity Opportunity? @relation(fields: [opportunityId], references: [id])

  @@index([isPrivate])
  @@index([isOnchain])
  @@index([flowId])
  @@index([createdAt])
  @@map("Draft")
  @@schema("web")
}

model DerivedData {
  id        String   @id @default(cuid())
  grantId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  grant Grant @relation(fields: [grantId], references: [id])

  // derived data here (generated from ai etc.)
  /// [Beneficiary[]]
  beneficiaries              Json?
  deliverables               String[]
  grades                     Json?
  /// [ImpactMetricDefinition[]]
  impactMetrics              Json?
  lastBuilderUpdate          DateTime?
  minimumSalary              Int?
  ongoingRequirements        Json?
  overallGrade               Float?
  requirementsMetrics        Json?
  shortDescription           String?
  title                      String?
  tagline                    String?
  coverImage                 String?
  mission                    String?
  /// [GrantBuilder]
  builder                    Json?
  /// [GrantGradients]
  gradients                  Json?
  /// [ImpactSummary]
  impactSummary              Json?
  /// [ImpactMonthly[]]
  impactMonthly              Json?
  /// [DeliverablesCompletionRate]
  deliverablesCompletionRate Json?     @map("deliverables_completion_rate")

  @@index([grantId])
  @@map("DerivedData")
  @@schema("web")
}

model Conversation {
  id          String   @id
  type        String
  messages    Json
  data        Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        String
  attachments Json?

  @@index([user])
  @@index([type])
  @@map("Conversation")
  @@schema("web")
}

model Story {
  id                      String   @id @default(uuid())
  title                   String
  summary                 String
  key_points              String[]
  participants            String[]
  header_image            String?
  timeline                Json
  sentiment               String   @db.VarChar(10)
  completeness            Decimal  @db.Decimal(3, 2)
  complete                Boolean
  sources                 String[]
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt
  media_urls              String[]
  author                  String
  tagline                 String
  grant_ids               String[]
  parent_flow_ids         String[]
  cast_hashes             String[]
  mint_urls               String[]
  info_needed_to_complete String?
  edits                   Json?

  @@index([complete])
  @@index([id])
  @@index([updated_at])
  @@index([parent_flow_ids])
  @@map("Stories")
  @@schema("web")
}

view Grant {
  id                               String  @id
  recipient                        String
  flowId                           String  @map("flow_id")
  submitter                        String
  parentContract                   String  @map("parent_contract")
  rootContract                     String  @map("root_contract")
  isTopLevel                       Boolean @map("is_top_level")
  isFlow                           Boolean @map("is_flow")
  isSiblingFlow                    Boolean @map("is_sibling_flow")
  title                            String
  description                      String
  image                            String
  tagline                          String?
  url                              String?
  isRemoved                        Boolean @map("is_removed")
  isActive                         Boolean @map("is_active")
  allocationsCount                 String  @map("allocations_count")
  monthlyIncomingFlowRate          String  @map("monthly_incoming_flow_rate")
  monthlyIncomingBaselineFlowRate  String  @map("monthly_incoming_baseline_flow_rate")
  monthlyIncomingBonusFlowRate     String  @map("monthly_incoming_bonus_flow_rate")
  monthlyOutgoingFlowRate          String  @map("monthly_outgoing_flow_rate")
  monthlyRewardPoolFlowRate        String  @map("monthly_reward_pool_flow_rate")
  monthlyBaselinePoolFlowRate      String  @map("monthly_baseline_pool_flow_rate")
  monthlyBonusPoolFlowRate         String  @map("monthly_bonus_pool_flow_rate")
  bonusMemberUnits                 String  @map("bonus_member_units")
  baselineMemberUnits              String  @map("baseline_member_units")
  totalEarned                      String  @map("total_earned")
  totalPaidOut                     String  @map("total_paid_out")
  activeRecipientCount             Int     @map("active_recipient_count")
  awaitingRecipientCount           Int     @map("awaiting_recipient_count")
  challengedRecipientCount         Int     @map("challenged_recipient_count")
  tcr                              String? @unique
  erc20                            String? @unique
  arbitrator                       String? @unique
  tokenEmitter                     String? @unique @map("token_emitter")
  status                           Int
  challengePeriodEndsAt            Int     @map("challenge_period_ends_at")
  activatedAt                      Int?    @map("activated_at")
  removedAt                        Int?    @map("removed_at")
  isDisputed                       Boolean @map("is_disputed")
  isResolved                       Boolean @map("is_resolved")
  evidenceGroupID                  String  @unique @map("evidence_group_id")
  createdAt                        Int     @map("created_at")
  updatedAt                        Int     @map("updated_at")
  baselinePool                     String  @map("baseline_pool")
  bonusPool                        String  @map("bonus_pool")
  managerRewardPool                String  @map("manager_reward_pool")
  superToken                       String  @map("super_token")
  underlyingERC20Token             String  @map("underlying_erc_20_token")
  underlyingTokenSymbol                 String  @map("underlying_token_symbol")
  underlyingTokenPrefix                 String  @map("underlying_token_prefix")
  underlyingTokenName                   String  @map("underlying_token_name")
  underlyingTokenDecimals               Int     @map("underlying_token_decimals")
  underlyingTokenLogo                   String? @map("underlying_token_logo")
  underlyingTokenEthPrice              String? @map("underlying_token_eth_price")
  underlyingTokenUsdPrice              String? @map("underlying_token_usd_price")
  manager                          String  @map("manager")
  managerRewardSuperfluidPool      String  @map("manager_reward_superfluid_pool")
  managerRewardPoolFlowRatePercent Int     @map("manager_reward_pool_flow_rate_percent")
  baselinePoolFlowRatePercent      Int     @map("baseline_pool_flow_rate_percent")
  bonusPoolQuorum                  Int     @map("bonus_pool_quorum")
  totalAllocationWeightOnFlow      String  @map("total_allocation_weight_on_flow")
  isOnchainStartup                 Boolean @map("is_onchain_startup")
  isAccelerator                    Boolean @map("is_accelerator")
  recipientId                      String  @map("recipient_id")
  allocationStrategies             String[] @map("allocation_strategies")
  chainId                          Int     @map("chain_id")

  flow                 Grant         @relation("Subgrants", fields: [flowId], references: [id])
  subgrants            Grant[]       @relation("Subgrants")
  drafts               Draft[]
  disputes             Dispute[]
  tokenHolders         TokenHolder[]
  evidences            Evidence[]
  derivedData          DerivedData?
  allocations          Allocation[]
  impacts              Impact[]
  opportunities        Opportunity[] @relation("StartupOpportunity")
  opportunitiesBudgets Opportunity[] @relation("StartupBudgetOpportunity") // not needed, just required by Prisma

  @@unique([recipientId])
  @@index([isTopLevel])
  @@index([isFlow])
  @@index([isActive])
  @@index([isTopLevel, isFlow])
  @@map("Grant")
  @@schema("onchain")
}

view SuperfluidFlow {
  token      String
  sender     String
  receiver   String
  flowRate   String @map("flow_rate")
  deposit    String
  startTime  Int    @map("start_time")
  lastUpdate Int    @map("last_update")
  closeTime  Int?   @map("close_time")
  chainId    Int    @map("chain_id")

  @@id([token, sender, receiver, chainId])
  @@index([token])
  @@index([sender])
  @@index([receiver])
  @@index([sender, receiver])
  @@index([flowRate])
  @@index([chainId])
  @@schema("onchain")
}


view Allocation {
  id               String @id
  contract         String
  recipientId      String @map("recipient_id")
  allocationKey    String @map("allocation_key")
  strategy         String
  bps              Int
  allocator        String
  blockNumber      String @map("block_number")
  blockTimestamp   Int    @map("block_timestamp")
  transactionHash  String @map("transaction_hash")
  allocationsCount String @map("allocations_count")
  chainId          Int    @map("chain_id")

  grant Grant @relation(fields: [recipientId], references: [recipientId])

  @@index([allocator])
  @@index([contract])
  @@index([recipientId])
  @@schema("onchain")
}

view erc721Token {
  id       String  @id
  contract String
  owner    String
  delegate String
  tokenId  Int     @map("token_id")
  burned   Boolean
  chainId  Int     @map("chain_id")

  @@index([contract])
  @@index([owner])
  @@index([delegate])
  @@map("ERC721Token")
  @@schema("onchain")
}

view Dispute {
  id                   String     @id
  disputeId            String     @map("dispute_id")
  arbitrator           String
  arbitrable           String
  grantId              String     @map("grant_id")
  challenger           String
  votingStartTime      Int        @map("voting_start_time")
  votingEndTime        Int        @map("voting_end_time")
  revealPeriodEndTime  Int        @map("reveal_period_end_time")
  votes                String
  requesterPartyVotes  String     @map("requester_party_votes")
  challengerPartyVotes String     @map("challenger_party_votes")
  ruling               Int
  creationBlock        Int        @map("creation_block")
  totalSupply          String     @map("total_supply")
  isExecuted           Boolean    @map("is_executed")
  evidenceGroupID      String     @unique @map("evidence_group_id")
  chainId              Int        @map("chain_id")
  grant                Grant      @relation(fields: [grantId], references: [id])
  evidences            Evidence[]

  @@schema("onchain")
}

view DisputeVote {
  id          String  @id
  arbitrator  String
  disputeId   String  @map("dispute_id")
  commitHash  String  @map("commit_hash")
  voter       String
  choice      Int?
  votes       String?
  reason      String?
  committedAt Int     @map("committed_at")
  revealedBy  String? @map("revealed_by")
  revealedAt  Int?    @map("revealed_at")
  chainId     Int     @map("chain_id")

  @@unique([disputeId, arbitrator, voter])
  @@index([voter])
  @@schema("onchain")
}

view TokenHolder {
  id                String @id
  tokenContract     String @map("token_contract")
  flow              Grant  @relation(fields: [tokenContract], references: [erc20])
  holder            String
  firstPurchase     Int    @map("first_purchase")
  amount            String
  totalBought       String @map("total_bought")
  totalSold         String @map("total_sold")
  costBasis         String @map("cost_basis")
  totalSaleProceeds String @map("total_sale_proceeds")
  chainId          Int    @map("chain_id")

  @@unique([tokenContract, holder])
  @@index([holder])
  @@index([holder, amount])
  @@schema("onchain")
}

view Evidence {
  id              String @id
  arbitrator      String
  evidenceGroupID String @map("evidence_group_id")
  evidence        String
  party           String
  blockNumber     String @map("block_number")
  chainId         Int    @map("chain_id")

  dispute Dispute @relation(fields: [evidenceGroupID], references: [evidenceGroupID])
  grant   Grant   @relation(fields: [evidenceGroupID], references: [evidenceGroupID])

  @@index([evidenceGroupID])
  @@schema("onchain")
}

view AllocationStrategy {
  address      String
  strategyKey  String @map("strategy_key")
  chainId      Int    @map("chain_id")
  registeredAt Int    @map("registered_at")

  @@index([address])
  @@index([strategyKey])
  @@index([chainId])
  @@unique([address, chainId])
  @@schema("onchain")
}

model Impact {
  id             String    @id
  name           String
  date           DateTime
  location       String?
  deletedAt      DateTime? @map("deleted_at")
  /// [Proof[]]
  proofs         Json
  /// [BestImage]
  bestImage      Json      @map("best_image")
  /// [ImpactMetric[]]
  impactMetrics  Json      @map("impact_metrics")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  /// [InvolvedPerson[]]
  peopleInvolved Json      @map("people_involved")
  grantId        String    @map("grant_id")
  complete       Boolean
  /// [ImpactResult[]]
  results        Json

  grant Grant @relation(fields: [grantId], references: [id])

  @@index([grantId])
  @@map("Impact")
  @@schema("web")
}

model Opportunity {
  id                      String   @id @default(uuid())
  position                String
  description             String
  applicationRequirements String   @map("application_requirements")
  startupId               String   @map("startup_id")
  flowId                  String   @map("flow_id")
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")
  status                  Int      @default(1) // 0: closed, 1: open
  expectedMonthlySalary   Int      @map("expected_monthly_salary")

  startup Grant   @relation("StartupOpportunity", fields: [startupId], references: [id])
  budget  Grant   @relation("StartupBudgetOpportunity", fields: [flowId], references: [id])
  drafts  Draft[]

  @@index([flowId])
  @@index([startupId])
  @@map("Opportunity")
  @@schema("web")
}

/// Juicebox tables

view JuiceboxProject {
  chainId               Int      @map("chain_id")
  createdAt             Int      @map("created_at")
  projectId             Int      @map("project_id")
  paymentsCount         Int      @default(0) @map("payments_count")
  balance               Decimal  @default(0)
  isRevnet              Boolean  @map("is_revnet")
  deployer              String   @db.VarChar(42)
  owner                 String   @db.VarChar(42)
  erc20                 String?  @db.VarChar(42)
  erc20Supply           Decimal  @default(0) @map("erc20_supply")
  erc20Name             String?  @map("erc20_name")
  erc20Symbol           String?  @map("erc20_symbol")
  cashoutA              BigInt   @default(0) @map("cashout_a")
  cashoutB              BigInt   @default(0) @map("cashout_b")
  currentRulesetId      BigInt   @default(0) @map("current_ruleset_id")
  contributorsCount     Int      @default(0) @map("contributors_count")
  redeemCount           Int      @default(0) @map("redeem_count")
  redeemVolume          BigInt   @default(0) @map("redeem_volume")
  pendingReservedTokens BigInt   @default(0) @map("pending_reserved_tokens")
  metadataUri           String?  @map("metadata_uri")
  metadata              Json?
  name                  String?
  infoUri               String?  @map("info_uri")
  logoUri               String?  @map("logo_uri")
  coverImageUri         String?  @map("cover_image_uri")
  twitter               String?
  discord               String?
  telegram              String?
  tokens                String[]
  domain                String?
  description           String?
  tags                  String[]
  projectTagline        String?  @map("project_tagline")
  suckerGroupId         String?  @map("sucker_group_id")

  accountingToken         String  @map("accounting_token")
  accountingDecimals      Int     @map("accounting_decimals")
  accountingCurrency      Int     @map("accounting_currency")
  accountingTokenSymbol   String  @map("accounting_token_symbol")
  accountingTokenName     String  @map("accounting_token_name")

  participants JuiceboxParticipant[]
  rulesets     JuiceboxRuleset[]
  payEvents    JuiceboxPayEvent[]

  @@id([chainId, projectId])
  @@index([projectId])
  @@map("project")
  @@schema("juicebox")
}

view JuiceboxSuckerGroup {
  id        String   @id
  projects  String[]
  addresses String[] @db.VarChar(42)
  createdAt Int      @map("created_at")

  @@map("sucker_group")
  @@schema("juicebox")
}

view JuiceboxParticipant {
  chainId      Int      @map("chain_id")
  projectId    Int      @map("project_id")
  createdAt    Int      @map("created_at")
  balance      Decimal  @default(0)
  isRevnet     Boolean? @map("is_revnet")
  address      String   @db.VarChar(42)
  firstOwned   Int?     @map("first_owned")
  cashOutValue Decimal   @default(0) @map("cash_out_value")
  suckerGroupId String? @map("sucker_group_id")

  project JuiceboxProject @relation(fields: [chainId, projectId], references: [chainId, projectId])

  @@id([chainId, projectId, address])
  @@index([address])
  @@index([chainId, projectId])
  @@map("participant")
  @@schema("juicebox")
}

view JuiceboxRuleset {
  chainId                    Int     @map("chain_id")
  projectId                  Int     @map("project_id")
  rulesetId                  BigInt  @map("ruleset_id")
  createdAt                  Int     @map("created_at")
  queuedAt                   Int     @map("queued_at")
  cycleNumber                Int     @map("cycle_number")
  basedOnId                  BigInt  @map("based_on_id")
  start                      BigInt
  duration                   BigInt
  weight                     Decimal
  weightCutPercent           Int     @map("weight_cut_percent")
  approvalHook               String? @map("approval_hook") @db.VarChar(42)
  reservedPercent            Int     @map("reserved_percent")
  cashOutTaxRate             Int     @map("cash_out_tax_rate")
  baseCurrency               Int     @map("base_currency")
  pausePay                   Boolean @map("pause_pay")
  pauseCreditTransfers       Boolean @map("pause_credit_transfers")
  allowOwnerMinting          Boolean @map("allow_owner_minting")
  allowSetCustomToken        Boolean @map("allow_set_custom_token")
  allowTerminalMigration     Boolean @map("allow_terminal_migration")
  allowSetTerminals          Boolean @map("allow_set_terminals")
  allowSetController         Boolean @map("allow_set_controller")
  allowAddAccountingContext  Boolean @map("allow_add_accounting_context")
  allowAddPriceFeed          Boolean @map("allow_add_price_feed")
  ownerMustSendPayouts       Boolean @map("owner_must_send_payouts")
  holdFees                   Boolean @map("hold_fees")
  useTotalSurplusForCashOuts Boolean @map("use_total_surplus_for_cash_outs")
  useDataHookForPay          Boolean @map("use_data_hook_for_pay")
  useDataHookForCashOut      Boolean @map("use_data_hook_for_cash_out")
  dataHook                   String? @map("data_hook") @db.VarChar(42)
  metadata                   BigInt
  metadataExtra              Int?    @map("metadata_extra")
  mustStartAtOrAfter         BigInt? @map("must_start_at_or_after")
  caller                     String  @db.VarChar(42)
  approvalStatus             String? @map("approval_status")

  project JuiceboxProject @relation(fields: [chainId, projectId], references: [chainId, projectId])

  @@id([chainId, projectId, rulesetId])
  @@index([projectId])
  @@index([rulesetId])
  @@index([start])
  @@map("ruleset")
  @@schema("juicebox")
}

view JuiceboxPayEvent {
  id                    String  @id
  chainId               Int     @map("chain_id")
  projectId             Int     @map("project_id")
  rulesetId             BigInt  @map("ruleset_id")
  rulesetCycleNumber    BigInt  @map("ruleset_cycle_number")
  txHash                String  @map("tx_hash") @db.VarChar(66)
  timestamp             Int
  caller                String  @db.VarChar(42)
  from                  String  @db.VarChar(42)
  logIndex              Int     @map("log_index")
  payer                 String  @db.VarChar(42)
  beneficiary           String  @db.VarChar(42)
  amount                Decimal @db.Decimal(78, 0)
  newlyIssuedTokenCount Decimal @map("newly_issued_token_count") @db.Decimal(78, 0)
  memo                  String
  suckerGroupId         String? @map("sucker_group_id")
  txnValue              String @map("txn_value")

  metadata String @db.VarChar(66)

  project JuiceboxProject @relation(fields: [chainId, projectId], references: [chainId, projectId])

  @@index([projectId])
  @@index([payer])
  @@index([beneficiary])
  @@index([timestamp])
  @@map("pay_event")
  @@schema("juicebox")
}
