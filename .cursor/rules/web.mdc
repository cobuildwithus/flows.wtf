---
description: Web application architecture and component guidelines
globs: *
alwaysApply: false
---
## Application Structure
- Keep pages and layouts in app/ directory
- Group related components by feature/domain
- Place reusable UI components in components/ui/
- Store utilities and hooks in lib/
- Use Sonner for toast notifications
- Leverage Framer Motion for animations

## Database
- When querying the DB use Prisma and follow @prisma.mdc
- Project uses 2 Postgres databases
- Main database client is exported in @flows-db.ts - with the schema defined in @flows.prisma
- Farcaster data (casts + profiles) are in @farcaster-db.ts with the schema in @farcaster.prisma
- In the main database there are some views - they contain blockchain data generated by Ponder (indexer)

## State Management & Data Fetching
- Use SWR as primary data fetching solution
- Implement optimistic updates where appropriate
- Use Zod for data validation and type safety
- Keep API routes in app/api/ directory
- Use edge runtime where possible for better performance

## Authentication & Authorization
- Use Privy for Web3 authentication (@privy-io/react-auth)
- Use server-side authentication checks
- Keep auth utilities in lib/auth
- Handle guest and authenticated states appropriately

## Dependencies & Packages
- Use Tailwind CSS with proper configuration:
  - Include tailwindcss-animate for animations
  - Use tailwind-merge for className merging
  - Configure tailwind-scrollbar for custom scrollbars

## Web3 Integration
- Use Viem 2.x for Ethereum interactions
- Implement Wagmi 2.x hooks for contract state
- Keep blockchain-related logic in dedicated hooks/utilities
- Handle wallet connections via Privy
- Store contract-related constants in dedicated files
